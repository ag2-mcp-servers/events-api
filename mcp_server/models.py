# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T08:55:39+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, EmailStr, Field, RootModel, confloat


class Action(RootModel[Any]):
    root: Any


class Client(BaseModel):
    app_name: Optional[str] = Field(None, examples=['1Password Extension'])
    app_version: Optional[str] = Field(None, examples=['20127'])
    ip_address: Optional[str] = Field(None, examples=['13.227.95.22'])
    os_name: Optional[str] = Field(None, examples=['MacOSX'])
    os_version: Optional[str] = Field(None, examples=['10.15.6'])
    platform_name: Optional[str] = Field(None, examples=['Chrome'])
    platform_version: Optional[str] = Field(
        None,
        description="Depending on the platform used, this can be the version of the browser that the client extension is installed, the model of computer that the native application is installed or the machine's CPU version that the CLI was installed",
    )


class Cursor(BaseModel):
    cursor: Optional[str] = Field(
        None,
        description='Cursor to fetch more data if available or continue the polling process if required',
        examples=['aGVsbG8hIGlzIGl0IG1lIHlvdSBhcmUgbG9va2luZyBmb3IK'],
    )


class CursorCollection(Cursor):
    has_more: Optional[bool] = Field(
        None,
        description='Whether there may still be more data to fetch using the returned cursor. If true, the subsequent request could still be empty.',
    )


class DateTimeRFC3339(RootModel[datetime]):
    root: datetime = Field(..., examples=['2020-06-11T16:32:50-03:00'])


class Details(BaseModel):
    value: Optional[str] = Field(
        None,
        description='For firewall prevented sign-ins, the value is the chosen continent, country, etc. that blocked the sign-in attempt',
        examples=['Europe'],
    )


class Error1(BaseModel):
    Message: Optional[str] = Field(None, description='The error message.')


class Error(BaseModel):
    Error: Optional[Error1] = None


class Introspection(BaseModel):
    Features: Optional[List[str]] = Field(
        None, examples=[['itemusages', 'signinattempts']]
    )
    IssuedAt: Optional[DateTimeRFC3339] = None
    UUID: Optional[str] = None


class ResetCursor(BaseModel):
    end_time: Optional[DateTimeRFC3339] = None
    limit: Optional[confloat(ge=1.0, le=1000.0)] = None
    start_time: Optional[DateTimeRFC3339] = None


class Category(Enum):
    success = 'success'
    credentials_failed = 'credentials_failed'
    mfa_failed = 'mfa_failed'
    modern_version_failed = 'modern_version_failed'
    firewall_failed = 'firewall_failed'
    firewall_reported_success = 'firewall_reported_success'


class Type(Enum):
    credentials_ok = 'credentials_ok'
    mfa_ok = 'mfa_ok'
    password_secret_bad = 'password_secret_bad'
    mfa_missing = 'mfa_missing'
    totp_disabled = 'totp_disabled'
    totp_bad = 'totp_bad'
    totp_timeout = 'totp_timeout'
    u2f_disabled = 'u2f_disabled'
    u2f_bad = 'u2f_bad'
    u2f_timout = 'u2f_timout'
    duo_disabled = 'duo_disabled'
    duo_bad = 'duo_bad'
    duo_timeout = 'duo_timeout'
    duo_native_bad = 'duo_native_bad'
    platform_secret_disabled = 'platform_secret_disabled'
    platform_secret_bad = 'platform_secret_bad'
    platform_secret_proxy = 'platform_secret_proxy'
    code_disabled = 'code_disabled'
    code_bad = 'code_bad'
    code_timeout = 'code_timeout'
    ip_blocked = 'ip_blocked'
    continent_blocked = 'continent_blocked'
    country_blocked = 'country_blocked'
    anonymous_blocked = 'anonymous_blocked'
    all_blocked = 'all_blocked'
    modern_version_missing = 'modern_version_missing'
    modern_version_old = 'modern_version_old'


class UUID(RootModel[str]):
    root: str = Field(..., examples=['56YE2TYN2VFYRLNSHKPW5NVT5E'])


class User(BaseModel):
    email: Optional[EmailStr] = None
    name: Optional[str] = Field(
        None, description='Full name', examples=["Jack O'Neill"]
    )
    uuid: Optional[UUID] = None


class ItemUsage(BaseModel):
    action: Optional[Action] = None
    client: Optional[Client] = None
    item_uuid: Optional[UUID] = None
    timestamp: Optional[DateTimeRFC3339] = None
    used_version: Optional[int] = None
    user: Optional[User] = None
    uuid: Optional[UUID] = None
    vault_uuid: Optional[UUID] = None


class ItemUsageItems(CursorCollection):
    items: Optional[List[ItemUsage]] = None


class SignInAttempt(BaseModel):
    category: Optional[Category] = Field(None, examples=['firewall_failed'])
    client: Optional[Client] = None
    country: Optional[str] = Field(
        None, description='Country ISO Code', examples=['France']
    )
    details: Optional[Details] = None
    session_uuid: Optional[UUID] = None
    target_user: Optional[User] = None
    timestamp: Optional[DateTimeRFC3339] = None
    type: Optional[Type] = Field(None, examples=['continent_blocked'])
    uuid: Optional[UUID] = None


class SignInAttemptItems(CursorCollection):
    items: Optional[List[SignInAttempt]] = None
