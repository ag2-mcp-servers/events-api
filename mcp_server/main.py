# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T08:55:39+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBearer

from models import Error, Introspection, ItemUsageItems, SignInAttemptItems

app = MCPProxy(
    description='1Password Events API Specification.',
    title='Events API',
    version='1.0.0',
    servers=[
        {'description': '1Password', 'url': 'https://events.1password.com'},
        {'description': '1Password CA', 'url': 'https://events.1password.ca'},
        {'description': '1Password EU', 'url': 'https://events.1password.eu'},
        {
            'description': '1Password Enterprise',
            'url': 'https://events.ent.1password.com',
        },
    ],
)


@app.get(
    '/api/auth/introspect',
    tags=['authentication_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_auth_introspect():
    """
    Performs introspection of the provided Bearer JWT token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/itemusages',
    description=""" This endpoint requires your JSON Web Token to have the *itemusages* feature. """,
    tags=['item_usage_tracking'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_item_usages():
    """
    Retrieves item usages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/signinattempts',
    description=""" This endpoint requires your JSON Web Token to have the *signinattempts* feature. """,
    tags=['authentication_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_sign_in_attempts():
    """
    Retrieves sign-in attempts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
